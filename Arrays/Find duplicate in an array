/*Given a read only array of n + 1 integers between 1 and n,
find one number that repeats in linear time using less than O(n) space and traversing the stream sequentially O(1) times.*/

int Solution::repeatedNumber(const vector<int> &A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    
    int slow = A[0];
  int fast = A[A[0]];
  while (slow != fast) {
    slow = A[slow];
    fast = A[A[fast]];
  }

  fast = 0;
  while (slow != fast) {
    slow = A[slow];
    fast = A[fast];
  }
  return slow;
  }
/*
/* vector<int> v(A.size());
fill(v.begin(), v.end(), true);

for(int i=0;i<A.size();i++){
if(v[A[i]]){
v[A[i]]=false;
}

else
return A[i];
}
*/
=> for the above code, it was a good approach but memory lmt exceeded as the question requires specific time and space.
=> also given that if no duplicate occurs return -1 can never exist since the length of array is n+1 and distinct elements it can have in from 1 to n so by default there has to be atleast one duplicate.
*/
